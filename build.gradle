buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:${junitGradlePlugin}"
    }
}

plugins {
    id "java"
    id "idea"
    id "application"

    id "checkstyle"
    id "findbugs"
    id "pmd"
    id "org.sonarqube" version "2.3"

    id "jacoco"
}

repositories {
    mavenCentral()
    jcenter() // Used by TestFX
}

apply plugin: "org.junit.platform.gradle.plugin"

configurations {
    checkerFrameworkAnnotatedJDK {
        description = 'a copy of JDK classes with Checker Framework type qualifiers inserted'
    }
    checkerFramework {
        description = 'The Checker Framework: custom pluggable types for Java'
    }
}

dependencies {
    // Logger
    compile("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    compile("org.apache.logging.log4j:log4j-jul:${log4jVersion}")

    // RTree
    compile("com.github.davidmoten:rtree:${rTreeVersion}")
    compile("com.vividsolutions:jts-core:${jtsCoreVersion}")

    // SQLite driver
    compile("org.xerial:sqlite-jdbc:${sqliteVersion}")

    // Apache Commons
    compile("commons-codec:commons-codec:${commonsCodecVersion}")
    compile("org.apache.commons:commons-lang3:${commonsLangVersion}")

    // FindBugs annotations
    compile("com.google.code.findbugs:annotations:${findBugsAnnotations}")

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile("junit:junit:${junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

    // Asserts and Mocks
    testCompile("org.assertj:assertj-core:${assertjVersion}")
    testCompile("org.mockito:mockito-core:${mockitoCoreVersion}")

    // TestFX framework
    testCompile("org.testfx:testfx-core:${testfxVersion}")
    testCompile("org.testfx:testfx-junit:${testfxVersion}")
    testRuntime("org.testfx:openjfx-monocle:${openjfxMonocoleVersion}")

    // Checker Framework
    checkerFrameworkAnnotatedJDK "org.checkerframework:jdk8:${checkerFrameworkVersion}"
    checkerFramework "org.checkerframework:checker:${checkerFrameworkVersion}"
    compile("org.checkerframework:checker-qual:${checkerFrameworkVersion}")
}

jar {
    manifest {
        attributes 'Main-Class': mainClass
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': mainClass
    }
    baseName = project.name + '-all'
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

if (project.hasProperty('headless') ? project.headless : false) {
    test {
        jvmArgs = ['-Djava.awt.headless=true',
                   '-Dtestfx.robot=glass',
                   '-Dtestfx.headless=true',
                   '-Dprism.order=sw',
                   '-Dprism.text=t2k']
    }
}

tasks.withType(JavaCompile).all { JavaCompile compile ->
    compile.options.compilerArgs = [
            '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
            '-processorpath', "${configurations.checkerFramework.asPath}",
            "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}",
            "-AskipDefs=^org.dnacronym.hygene.ui|Test\$"
    ]

}

/* Plugin settings */
mainClassName = mainClass

checkstyle {
    ignoreFailures = true
}

jacocoTestReport {
    reports {
        csv.enabled = false
        html.enabled = true
        xml.enabled = true
    }
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

afterEvaluate {
    jacoco {
        applyTo junitPlatformTest
    }

    task jacocoJUnit5TestReport(type: JacocoReport) {
        executionData junitPlatformTest
        sourceSets sourceSets.main
        sourceDirectories = files()
        classDirectories = files()
        sourceDirectories = files("./src/main")
        classDirectories = files("$buildDir/classes/main")
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    junitPlatformTest { finalizedBy jacocoJUnit5TestReport }
}
